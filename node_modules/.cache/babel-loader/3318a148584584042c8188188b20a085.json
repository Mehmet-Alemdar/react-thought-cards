{"ast":null,"code":"var _jsxFileName = \"/Users/mehmetalemdar/Desktop/thought-card/src/components/Thoughts.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { removeThought, updateThought } from '../features/thought/thoughtSlice';\nimport { openPopupEdit, closePopupEdit } from '../features/thought/thoughtSlice';\nimport { openPopupCard, closePopupCard } from '../features/popup/popupCardSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Thoughts() {\n  _s();\n\n  const dispatch = useDispatch();\n  const [thought, setThought] = useState(0);\n  const thoughts = useSelector(state => state.thought.thoughts);\n\n  const handleClickOpenPopup = (thought, index) => {\n    dispatch(openPopupEdit({\n      thought,\n      index\n    }));\n    dispatch(openPopupCard());\n  };\n\n  const handleClickClosePopup = (thought, index) => {\n    dispatch(closePopupEdit({\n      thought,\n      index\n    }));\n    dispatch(closePopupCard());\n  };\n\n  const handleClickRemoveThought = (thought, index) => {\n    dispatch(removeThought({\n      thought,\n      index\n    }));\n    dispatch(closePopupCard());\n  };\n\n  const handleClickUpdateThought = index => {\n    const title = document.getElementById('updateTitle').value;\n    const content = document.getElementById('updateContent').value;\n    const thought = {\n      title,\n      content\n    };\n    console.log(thought);\n    dispatch(updateThought({\n      thought,\n      index\n    }));\n    dispatch(closePopupEdit({\n      thought,\n      index\n    }));\n    dispatch(closePopupCard());\n  };\n\n  const thoughtItems = thoughts.map((thought, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: thought.popupEdit ? 'thoughtCardEdit' : 'thoughtCard',\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"buttonRemove\",\n      onClick: () => handleClickRemoveThought(thought, index),\n      children: \"delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: thought.popupEdit ? 'backButton' : 'backButtonNone',\n      onClick: () => handleClickClosePopup(thought, index),\n      children: \"X\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => handleClickOpenPopup(thought, index),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"updateTitle\",\n        className: thought.popupEdit ? 'cardInputTitleEdit' : 'cardInputTitle',\n        defaultValue: thought.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contentContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"updateContent\",\n          className: thought.popupEdit ? 'cardInputTextareaEdit' : 'cardInputTextarea',\n          defaultValue: thought.content,\n          rows: \"10\",\n          cols: \"40\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: thought.popupEdit ? 'buttonUpdateVisible' : 'buttonUpdateInvisible',\n      onClick: () => handleClickUpdateThought(index),\n      children: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thoughts\",\n    children: thoughtItems\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Thoughts, \"TAuI/haNVFymj5fObSuRbNf1BOk=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Thoughts;\nexport default Thoughts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Thoughts\");","map":{"version":3,"sources":["/Users/mehmetalemdar/Desktop/thought-card/src/components/Thoughts.js"],"names":["useSelector","useDispatch","useState","removeThought","updateThought","openPopupEdit","closePopupEdit","openPopupCard","closePopupCard","Thoughts","dispatch","thought","setThought","thoughts","state","handleClickOpenPopup","index","handleClickClosePopup","handleClickRemoveThought","handleClickUpdateThought","title","document","getElementById","value","content","console","log","thoughtItems","map","popupEdit"],"mappings":"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","sourcesContent":["import {useSelector, useDispatch} from 'react-redux'  \nimport { useState } from 'react'\nimport { removeThought, updateThought} from '../features/thought/thoughtSlice'\nimport { openPopupEdit, closePopupEdit } from '../features/thought/thoughtSlice'\nimport { openPopupCard, closePopupCard } from '../features/popup/popupCardSlice'\n\nfunction Thoughts() {\n  const dispatch = useDispatch()\n\n  const [thought, setThought] = useState(0)\n\n  const thoughts = useSelector(state => state.thought.thoughts)\n\n  \n  const handleClickOpenPopup = (thought, index) => {\n    dispatch(openPopupEdit({thought, index}))\n    dispatch(openPopupCard())\n  }\n\n  const handleClickClosePopup = (thought, index) => {\n    dispatch(closePopupEdit({thought, index}))\n    dispatch(closePopupCard())\n  }\n\n  const handleClickRemoveThought = (thought, index) => {\n    dispatch(removeThought({thought, index}))\n    dispatch(closePopupCard())\n  }\n\n  const handleClickUpdateThought = (index) => {\n    const title = document.getElementById('updateTitle').value\n    const content = document.getElementById('updateContent').value\n    const thought = {\n      title,\n      content\n    }\n    console.log(thought);\n    \n    dispatch(updateThought({thought, index}))\n    dispatch(closePopupEdit({thought, index}))\n    dispatch(closePopupCard())\n  }\n\n  const thoughtItems = thoughts.map((thought, index) => \n    <div key={index} className={thought.popupEdit ? 'thoughtCardEdit' : 'thoughtCard'} >\n      <button \n        className='buttonRemove' \n        onClick={() => handleClickRemoveThought(thought, index)}>\n          delete\n      </button>\n      <button \n        className={thought.popupEdit ? 'backButton' : 'backButtonNone'} \n        onClick={() => handleClickClosePopup(thought, index)}>\n        X\n      </button>\n      <div onClick={() => handleClickOpenPopup(thought, index)}>\n        <input \n          id='updateTitle'\n          className={thought.popupEdit ? 'cardInputTitleEdit'  : 'cardInputTitle' }\n          defaultValue={thought.title}>\n        </input>\n        <hr />\n        <div className='contentContainer'>\n          <textarea \n            id='updateContent'\n            className={thought.popupEdit ? 'cardInputTextareaEdit'  : 'cardInputTextarea' }\n            defaultValue={thought.content}\n            rows=\"10\" \n            cols=\"40\"\n            >\n          </textarea>\n        </div>\n      </div>\n      <button \n        className={thought.popupEdit ? 'buttonUpdateVisible' : 'buttonUpdateInvisible'}\n        onClick={() => handleClickUpdateThought(index)}>\n          Update\n      </button>\n    </div>\n  )\n\n  return (\n    <div className=\"thoughts\">\n      {thoughtItems}\n    </div>\n  )\n\n}\n\nexport default Thoughts"]},"metadata":{},"sourceType":"module"}