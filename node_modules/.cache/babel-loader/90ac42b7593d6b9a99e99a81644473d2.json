{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport const thoughtSlice = createSlice({\n  name: 'thought',\n  initialState: {\n    thoughts: []\n  },\n  reducers: {\n    addThought: (state, action) => {\n      state.thoughts.push({ ...action.payload\n      });\n    },\n    removeThought: (state, action) => {\n      return { ...state,\n        thoughts: state.thoughts.filter((element, index) => index !== action.payload.index)\n      };\n    },\n    updateThought: (state, action) => {\n      return { ...state,\n        thoughts: state.thoughts.map((thought, index) => index === action.payload.index ? { ...thought,\n          title: 'hey'\n        } : thought)\n      };\n    },\n    openPopupEdit: (state, action) => {\n      return { ...state,\n        thoughts: state.thoughts.map((thought, index) => index === action.payload.index ? { ...thought,\n          popupEdit: true\n        } : thought)\n      };\n    },\n    closePopupEdit: (state, action) => {\n      return { ...state,\n        thoughts: state.thoughts.map((thought, index) => index === action.payload.index ? { ...thought,\n          popupEdit: false\n        } : thought)\n      };\n    }\n  }\n});\nexport const {\n  addThought,\n  removeThought,\n  updateThought,\n  openPopupEdit,\n  closePopupEdit\n} = thoughtSlice.actions;\nexport default thoughtSlice.reducer;","map":{"version":3,"sources":["/Users/mehmetalemdar/Desktop/thought-card/src/features/thought/thoughtSlice.js"],"names":["createSlice","thoughtSlice","name","initialState","thoughts","reducers","addThought","state","action","push","payload","removeThought","filter","element","index","updateThought","map","thought","title","openPopupEdit","popupEdit","closePopupEdit","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,YAAY,GAAGD,WAAW,CAAC;AACtCE,EAAAA,IAAI,EAAE,SADgC;AAEtCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,QAAQ,EAAE;AADE,GAFwB;AAKtCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7BD,MAAAA,KAAK,CAACH,QAAN,CAAeK,IAAf,CAAoB,EAClB,GAAGD,MAAM,CAACE;AADQ,OAApB;AAGD,KALO;AAMRC,IAAAA,aAAa,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAChC,aAAO,EAAC,GAAGD,KAAJ;AACLH,QAAAA,QAAQ,EAAEG,KAAK,CAACH,QAAN,CAAeQ,MAAf,CAAsB,CAACC,OAAD,EAAUC,KAAV,KAAoBA,KAAK,KAAKN,MAAM,CAACE,OAAP,CAAeI,KAAnE;AADL,OAAP;AAED,KATO;AAURC,IAAAA,aAAa,EAAE,CAACR,KAAD,EAAQC,MAAR,KAAmB;AAChC,aAAO,EAAC,GAAGD,KAAJ;AACLH,QAAAA,QAAQ,EAAEG,KAAK,CAACH,QAAN,CAAeY,GAAf,CAAmB,CAACC,OAAD,EAAUH,KAAV,KAAoBA,KAAK,KAAKN,MAAM,CAACE,OAAP,CAAeI,KAAzB,GAAiC,EAAC,GAAGG,OAAJ;AAAaC,UAAAA,KAAK,EAAE;AAApB,SAAjC,GAA8DD,OAArG;AADL,OAAP;AAED,KAbO;AAcRE,IAAAA,aAAa,EAAE,CAACZ,KAAD,EAAQC,MAAR,KAAmB;AAChC,aAAO,EAAC,GAAGD,KAAJ;AACPH,QAAAA,QAAQ,EAAEG,KAAK,CAACH,QAAN,CAAeY,GAAf,CAAmB,CAACC,OAAD,EAAUH,KAAV,KAAoBA,KAAK,KAAKN,MAAM,CAACE,OAAP,CAAeI,KAAzB,GAAiC,EAAC,GAAGG,OAAJ;AAAaG,UAAAA,SAAS,EAAE;AAAxB,SAAjC,GAAiEH,OAAxG;AADH,OAAP;AAED,KAjBO;AAkBRI,IAAAA,cAAc,EAAE,CAACd,KAAD,EAAQC,MAAR,KAAmB;AACjC,aAAO,EAAC,GAAGD,KAAJ;AACPH,QAAAA,QAAQ,EAAEG,KAAK,CAACH,QAAN,CAAeY,GAAf,CAAmB,CAACC,OAAD,EAAUH,KAAV,KAAoBA,KAAK,KAAKN,MAAM,CAACE,OAAP,CAAeI,KAAzB,GAAiC,EAAC,GAAGG,OAAJ;AAAaG,UAAAA,SAAS,EAAE;AAAxB,SAAjC,GAAkEH,OAAzG;AADH,OAAP;AAED;AArBO;AAL4B,CAAD,CAAhC;AA8BP,OAAO,MAAM;AAACX,EAAAA,UAAD;AAAaK,EAAAA,aAAb;AAA4BI,EAAAA,aAA5B;AAA2CI,EAAAA,aAA3C;AAA0DE,EAAAA;AAA1D,IAA4EpB,YAAY,CAACqB,OAA/F;AAEP,eAAerB,YAAY,CAACsB,OAA5B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const thoughtSlice = createSlice({\n  name: 'thought',\n  initialState: {\n    thoughts: []\n  },\n  reducers: {\n    addThought: (state, action) => {\n      state.thoughts.push({\n        ...action.payload\n      })\n    },\n    removeThought: (state, action) => {\n      return {...state,\n        thoughts: state.thoughts.filter((element, index) => index !== action.payload.index)}\n    },\n    updateThought: (state, action) => {\n      return {...state,\n        thoughts: state.thoughts.map((thought, index) => index === action.payload.index ? {...thought, title: 'hey'} : thought)}\n    },\n    openPopupEdit: (state, action) => {\n      return {...state,\n      thoughts: state.thoughts.map((thought, index) => index === action.payload.index ? {...thought, popupEdit: true} : thought)}\n    },\n    closePopupEdit: (state, action) => {\n      return {...state,\n      thoughts: state.thoughts.map((thought, index) => index === action.payload.index ? {...thought, popupEdit: false} : thought)}\n    }\n  }\n})\n\nexport const {addThought, removeThought, updateThought, openPopupEdit, closePopupEdit} = thoughtSlice.actions\n\nexport default thoughtSlice.reducer"]},"metadata":{},"sourceType":"module"}