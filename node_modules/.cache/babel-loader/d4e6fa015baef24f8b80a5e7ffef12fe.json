{"ast":null,"code":"var _jsxFileName = \"/Users/mehmetalemdar/Desktop/thought-card/src/components/Thoughts.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { removeThought, updateThought } from '../features/thought/thoughtSlice';\nimport { openPopupEdit, closePopupEdit } from '../features/thought/thoughtSlice';\nimport { openPopupCard, closePopupCard } from '../features/popup/popupCardSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Thoughts() {\n  _s();\n\n  const dispatch = useDispatch();\n  const thoughts = useSelector(state => state.thought.thoughts);\n  console.log(thoughts);\n\n  const handleClickOpenPopup = (thought, index) => {\n    dispatch(openPopupEdit({\n      thought,\n      index\n    }));\n    dispatch(openPopupCard());\n  };\n\n  const handleClickClosePopup = (thought, index) => {\n    dispatch(closePopupEdit({\n      thought,\n      index\n    }));\n    dispatch(closePopupCard());\n    const input = document.getElementById(index + '_updateTitle');\n    const content = document.getElementById(index + '_updateContent');\n    input.value = thought.title;\n    content.value = thought.content;\n  };\n\n  const handleClickRemoveThought = (thought, index) => {\n    dispatch(removeThought({\n      thought,\n      index\n    }));\n    dispatch(closePopupCard());\n  };\n\n  const handleClickUpdateThought = index => {\n    const title = document.getElementById(index + '_updateTitle').value;\n    const content = document.getElementById(index + '_updateContent').value;\n    const thought = {\n      title,\n      content\n    };\n    dispatch(updateThought({\n      thought,\n      index\n    }));\n    dispatch(closePopupEdit({\n      thought,\n      index\n    }));\n    dispatch(closePopupCard());\n  };\n\n  const handleMouseEnter = e => {\n    document.querySelector('.date').style.color = '#000';\n    document.querySelector('hr').style.color = '#000';\n  };\n\n  const MouseLeave = () => {\n    document.querySelector('.date').style.color = 'rgb(255, 232, 202)';\n  };\n\n  const thoughtItems = thoughts.map((thought, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseEnter: handleMouseEnter,\n    onMouseLeave: MouseLeave,\n    className: thought.popupEdit ? 'thoughtCardEdit' : 'thoughtCard',\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"buttonRemove\",\n      onClick: () => handleClickRemoveThought(thought, index),\n      children: \"delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: thought.popupEdit ? 'closeButton' : 'closeButtonNone',\n      onClick: () => handleClickClosePopup(thought, index),\n      children: \"X\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => handleClickOpenPopup(thought, index),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: index + '_updateTitle',\n        className: thought.popupEdit ? 'cardInputTitleEdit' : 'cardInputTitle',\n        defaultValue: thought.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contentContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: index + '_updateContent',\n          className: thought.popupEdit ? 'cardInputTextareaEdit' : 'cardInputTextarea',\n          defaultValue: thought.content,\n          rows: \"10\",\n          cols: \"40\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: thought.popupEdit ? 'dateCardOpen' : 'date',\n      children: thought.date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: thought.popupEdit ? 'buttonUpdateVisible' : 'buttonUpdateInvisible',\n      onClick: () => handleClickUpdateThought(index),\n      children: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thoughts\",\n    children: thoughtItems\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Thoughts, \"nWe14k2u4bFd3X48E+XZ/qNnLZU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Thoughts;\nexport default Thoughts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Thoughts\");","map":{"version":3,"sources":["/Users/mehmetalemdar/Desktop/thought-card/src/components/Thoughts.js"],"names":["useSelector","useDispatch","removeThought","updateThought","openPopupEdit","closePopupEdit","openPopupCard","closePopupCard","Thoughts","dispatch","thoughts","state","thought","console","log","handleClickOpenPopup","index","handleClickClosePopup","input","document","getElementById","content","value","title","handleClickRemoveThought","handleClickUpdateThought","handleMouseEnter","e","querySelector","style","color","MouseLeave","thoughtItems","map","popupEdit","date"],"mappings":"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","sourcesContent":["import {useSelector, useDispatch} from 'react-redux'  \nimport { removeThought, updateThought} from '../features/thought/thoughtSlice'\nimport { openPopupEdit, closePopupEdit } from '../features/thought/thoughtSlice'\nimport { openPopupCard, closePopupCard } from '../features/popup/popupCardSlice'\n\nfunction Thoughts() {\n  const dispatch = useDispatch()\n\n  const thoughts = useSelector(state => state.thought.thoughts)\n\n  console.log(thoughts)\n\n  const handleClickOpenPopup = (thought, index) => {\n    dispatch(openPopupEdit({thought, index}))\n    dispatch(openPopupCard())\n  }\n\n  const handleClickClosePopup = (thought, index) => {\n    dispatch(closePopupEdit({thought, index}))\n    dispatch(closePopupCard())\n\n    const input = document.getElementById(index+'_updateTitle')\n    const content = document.getElementById(index+'_updateContent')\n    input.value = thought.title\n    content.value = thought.content\n  }\n\n  const handleClickRemoveThought = (thought, index) => {\n    dispatch(removeThought({thought, index}))\n    dispatch(closePopupCard())\n  }\n\n  const handleClickUpdateThought = (index) => {\n    const title = document.getElementById(index+'_updateTitle').value\n    const content = document.getElementById(index+'_updateContent').value\n    const thought = {\n      title,\n      content\n    }\n    dispatch(updateThought({thought, index}))\n    dispatch(closePopupEdit({thought, index}))\n    dispatch(closePopupCard())\n  }\n\n\n  const handleMouseEnter = (e) => {\n    document.querySelector('.date').style.color = '#000'\n    document.querySelector('hr').style.color = '#000'\n  }\n\n  const MouseLeave = () => {\n    document.querySelector('.date').style.color = 'rgb(255, 232, 202)'\n  }\n  \n  const thoughtItems = thoughts.map((thought, index) => \n    <div key={index} onMouseEnter={handleMouseEnter} onMouseLeave={MouseLeave} className={thought.popupEdit ? 'thoughtCardEdit' : 'thoughtCard'} >\n      <button \n        className='buttonRemove' \n        onClick={() => handleClickRemoveThought(thought, index)}>\n          delete\n      </button>\n      <button \n        className={thought.popupEdit ? 'closeButton' : 'closeButtonNone'} \n        onClick={() => handleClickClosePopup(thought, index)}>\n        X\n      </button>\n      <div onClick={() => handleClickOpenPopup(thought, index)}>\n        <input \n          id={index+'_updateTitle'}\n          className={thought.popupEdit ? 'cardInputTitleEdit'  : 'cardInputTitle' }\n          defaultValue={thought.title}>\n        </input>\n        <hr />\n        <div className='contentContainer'>\n          <textarea \n            id={index+'_updateContent'}\n            className={thought.popupEdit ? 'cardInputTextareaEdit'  : 'cardInputTextarea' }\n            defaultValue={thought.content}\n            rows=\"10\" \n            cols=\"40\"\n            >\n          </textarea>\n        </div>\n      </div>\n      <p className={thought.popupEdit ? 'dateCardOpen' : 'date'}>{thought.date}</p>\n      <button \n        className={thought.popupEdit ? 'buttonUpdateVisible' : 'buttonUpdateInvisible'}\n        onClick={() => handleClickUpdateThought(index)}>\n          Update\n      </button>\n    </div>\n  )\n\n  return (\n    <div className=\"thoughts\">\n      {thoughtItems}\n    </div>\n  )\n\n}\n\nexport default Thoughts"]},"metadata":{},"sourceType":"module"}