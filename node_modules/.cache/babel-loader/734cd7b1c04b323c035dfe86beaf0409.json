{"ast":null,"code":"var _jsxFileName = \"/Users/mehmetalemdar/Desktop/thought-card/src/components/Thoughts.js\",\n    _s = $RefreshSig$();\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport React, { useState } from 'react';\nimport { removeThought, updateThought } from '../features/thought/thoughtSlice';\nimport { openPopupEdit, closePopupEdit } from '../features/thought/thoughtSlice';\nimport { openPopupCard, closePopupCard } from '../features/popup/popupCardSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Thoughts() {\n  _s();\n\n  const dispatch = useDispatch();\n  const thoughts = useSelector(state => state.thought.thoughts);\n  const [thought, setThought] = useState(thoughts);\n  console.log('a', thought);\n\n  const handleClickOpenPopup = (thought, index) => {\n    dispatch(openPopupEdit({\n      thought,\n      index\n    }));\n    dispatch(openPopupCard());\n  };\n\n  const handleClickClosePopup = (thought, index) => {\n    dispatch(closePopupEdit({\n      thought,\n      index\n    }));\n    dispatch(closePopupCard());\n  };\n\n  const handleClickRemoveThought = (thought, index) => {\n    dispatch(removeThought({\n      thought,\n      index\n    }));\n    dispatch(closePopupCard());\n  };\n\n  const handleClickUpdateThought = (thought, index) => {\n    dispatch(updateThought({\n      thought,\n      index\n    }));\n    dispatch(closePopupCard());\n  };\n\n  const thoughtItems = thoughts.map((thought, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: thought.popupEdit ? 'thoughtCardEdit' : 'thoughtCard',\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"buttonRemove\",\n      onClick: () => handleClickRemoveThought(thought, index),\n      children: \"delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: thought.popupEdit ? 'backButton' : 'backButtonNone',\n      onClick: () => handleClickClosePopup(thought, index),\n      children: \"X\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => handleClickOpenPopup(thought, index),\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: thought.popupEdit ? 'cardInputTitleEdit' : 'cardInputTitle',\n        defaultValue: thought.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"contentContainer\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: thought.popupEdit ? 'cardInputTextareaEdit' : 'cardInputTextarea',\n          defaultValue: thought.content,\n          rows: \"10\",\n          cols: \"40\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: thought.popupEdit ? 'buttonUpdateVisible' : 'buttonUpdateInvisible',\n      onClick: () => handleClickUpdateThought(thought, index),\n      children: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thoughts\",\n    children: thoughtItems\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Thoughts, \"y9iyusnA2k6I6akY+MR86mjrg7s=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = Thoughts;\nexport default Thoughts;\n\nvar _c;\n\n$RefreshReg$(_c, \"Thoughts\");","map":{"version":3,"sources":["/Users/mehmetalemdar/Desktop/thought-card/src/components/Thoughts.js"],"names":["useSelector","useDispatch","React","useState","removeThought","updateThought","openPopupEdit","closePopupEdit","openPopupCard","closePopupCard","Thoughts","dispatch","thoughts","state","thought","setThought","console","log","handleClickOpenPopup","index","handleClickClosePopup","handleClickRemoveThought","handleClickUpdateThought","thoughtItems","map","popupEdit","title","content"],"mappings":"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","sourcesContent":["import {useSelector, useDispatch} from 'react-redux'\nimport React, { useState } from 'react'\nimport { removeThought, updateThought} from '../features/thought/thoughtSlice'\nimport { openPopupEdit, closePopupEdit } from '../features/thought/thoughtSlice'\nimport { openPopupCard, closePopupCard } from '../features/popup/popupCardSlice'\n\nfunction Thoughts() {\n  const dispatch = useDispatch()\n\n  const thoughts = useSelector(state => state.thought.thoughts)\n\n  const [thought, setThought] = useState(thoughts)\n\n  console.log('a',thought);\n  \n  const handleClickOpenPopup = (thought, index) => {\n    dispatch(openPopupEdit({thought, index}))\n    dispatch(openPopupCard())\n  }\n\n  const handleClickClosePopup = (thought, index) => {\n    dispatch(closePopupEdit({thought, index}))\n    dispatch(closePopupCard())\n  }\n\n  const handleClickRemoveThought = (thought, index) => {\n    dispatch(removeThought({thought, index}))\n    dispatch(closePopupCard())\n  }\n\n  const handleClickUpdateThought = (thought, index) => {\n    dispatch(updateThought({thought, index}))\n    dispatch(closePopupCard())\n  }\n\n  const thoughtItems = thoughts.map((thought, index) => \n    <div key={index} className={thought.popupEdit ? 'thoughtCardEdit' : 'thoughtCard'} >\n      <button \n        className='buttonRemove' \n        onClick={() => handleClickRemoveThought(thought, index)}>\n          delete\n      </button>\n      <button \n        className={thought.popupEdit ? 'backButton' : 'backButtonNone'} \n        onClick={() => handleClickClosePopup(thought, index)}>\n        X\n      </button>\n      <div onClick={() => handleClickOpenPopup(thought, index)}>\n        <input \n          className={thought.popupEdit ? 'cardInputTitleEdit'  : 'cardInputTitle' }\n          defaultValue={thought.title}>\n        </input>\n        <hr />\n        <div className='contentContainer'>\n          <textarea \n            className={thought.popupEdit ? 'cardInputTextareaEdit'  : 'cardInputTextarea' }\n            defaultValue={thought.content}\n            rows=\"10\" \n            cols=\"40\"\n            >\n          </textarea>\n        </div>\n      </div>\n      <button \n        className={thought.popupEdit ? 'buttonUpdateVisible' : 'buttonUpdateInvisible'}\n        onClick={() => handleClickUpdateThought(thought, index)}>\n          Update\n      </button>\n    </div>\n  )\n\n  return (\n    <div className=\"thoughts\">\n      {thoughtItems}\n    </div>\n  )\n\n}\n\nexport default Thoughts"]},"metadata":{},"sourceType":"module"}